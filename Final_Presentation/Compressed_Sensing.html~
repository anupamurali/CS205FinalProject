<!doctype html>
<html lang="en">
<style type="text/css">
#wrap {
   width:900px;
   margin:0 auto;
}
#left_col {
   float:left;
   width:450px;
}
#right_col {
   float:right;
   width:450px;
}

table, th {
   border: 1px solid black;
}
</style>


	<head>
		<meta charset="utf-8">

		<title>Compressed Sensing</title>

		<meta name="description" content="IMAC Conference Presentation">
		<meta name="author" content="James Long">

		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">

		<link rel="stylesheet" href="css/reveal.css">
		<link rel="stylesheet" href="css/theme/white.css" id="theme">

		<!-- Printing and PDF exports -->
		<script>
			var link = document.createElement( 'link' );
			link.rel = 'stylesheet';
			link.type = 'text/css';
			link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
			document.getElementsByTagName( 'head' )[0].appendChild( link );
		</script>

		<!--[if lt IE 9]>
		<script src="lib/js/html5shiv.js"></script>
		<![endif]-->
	</head>

	<body>

		<div class="reveal">
          <div class='footer'>
           <img src="footer.jpg"> 
            </div>

			<!-- Any section element inside of this container is displayed as a slide -->
	        
				<div class="slides">
				
				<section>
					<h2>Compressed Sensing Ideas</h2>
                    <ul>
                                <li>Sub Nyquist sampling rates for SHM? <br> <br> </li>
                                <li>Dictionary decompositions for adaptive signal processing?<br> <br> </li>
                                
                    </ul>
				</section>

                <section>

                    <h3>Sub Nyquist Sampling</h3>
                    <p>$y_{m\times1} = \phi_{m\times n} x_{n\times1}$</p>
                    <p> where $x$ is the signal, $\phi$ is a random sampling matrix, $y$ is the compressed signal </p>
                    <p> Let $y_{m\times1} = \phi_{m\times n} D_{n\times n} s_{n\times1}$</p>
                    <p> where $D$ is an orthonormal basis e.g DFT</p>
                    <p> Assuming sparsity in $s$ we can approx. reconstruct $x$ by solving the following minimisation:</p>
                    <p> $min_{s} \|y-\phi D s\|_{2} + \alpha \|s\|_{1} $</p> 
                    <!-- <img class = "stretch" data-src="Fig1.jpg" style="background:none; border:none; box-shadow:none;">--> 
                </section>
                <section>
                <h2>Toy Example</h2>
                <img class = "stretch" data-src="Compressed_Sensing_orig.jpg" style="background:none; border:none; box-shadow:none;"> 
                </section>
                <section>
                <h2>Toy Example</h2>
                <img class = "stretch" data-src="Compressed_Sensing_re.jpg" style="background:none; border:none; box-shadow:none;"> 
                </section>
                <section>
                <h2>Experimental data 6x compression</h2>
                <img class = "stretch" data-src="Compressed_Sensing_expdata.jpg" style="background:none; border:none; box-shadow:none;">
                <p> White noise excitation from shaker<br> 2 s of data sampled at 2000Hz</p>
                </section>
                
                <section>
					<h2>Overcomplete Dictionaries</h2>
                    <p> Regular decompositions have the form: </p>
                    <p> $x_{n\times1} = D_{n\times n} s_{n\times1}$</p>
                    <p> Simple matrix-vector multiplication because $D^{-1} = D^{T}$</p>
                    <p> But we can still solve if D is not orthonormal:</p>
                     <p> $min \|s\|_{1}$ such that $x_{n\times 1} = D_{n\times m} s_{m\times 1}$</p>            
                    </ul>
				</section>
				
				<section>
				 <h2>Why is this useful?</h2>
				 <p> Let $D_{n\times 2n} = \lbrack\psi_{n\times n}, I_{n\times n} \rbrack$ : </p>
				  <p> where $\psi$ is the DFT matrix and $I$ is the identity matrix </p>
				   <p> We can decompose a signal into a combination of sinusoidal and delta components </p>
				</section>
				<section>
				 <h2>Why is this useful?</h2>
				 <p> Signal containing sum of sine wave and delta function </p>
				 <img class = "stretch" data-src="deltaandsine.jpg" style="background:none; border:none; box-shadow:none;">
				
				</section>
				<section>
				 <h2>Fourier decomposition</h2>
				 <img class = "stretch" data-src="delta_fft.jpg" style="background:none; border:none; box-shadow:none;">
				
				</section>
				<section>
				 <h2>Basis pursuit decomposition</h2>
				 <img class = "stretch" data-src="basis_pursuit_delta.jpg" style="background:none; border:none; box-shadow:none;">
				
				</section>
								<section>
				 <h2>Basis pursuit reconstruction</h2>
				 <img class = "stretch" data-src="basis_pursuit_re.jpg" style="background:none; border:none; box-shadow:none;">
				 <p> Perfect reconstruction from just 2 components </p>
				</section>
				
				<section>
				 <h2>Further questions</h2>
				 <p> What kind of dictionary would be useful? </p>
				 <ul>
                     <li>Overcomplete fourier basis</li>
                     <br>
                     <li>Combined fourier and wavelet dictionary</li>
                      <br>
                     <li>Can we learn the dictionary from the data*? <br>
                        *In a one-class setting </li
                                
                    </ul>
				</section>
			</div>
        </div>
		
        <script src="lib/js/head.min.js"></script>
		<script src="js/reveal.js"></script>

		<script>
			// Full list of configuration options available at:
			// https://github.com/hakimel/reveal.js#configuration
			Reveal.initialize({
				controls: true,
				progress: true,
				history: true,
				center: true,
				transition: 'slide', // none/fade/slide/convex/concave/zoom
				// Optional reveal.js plugins

				dependencies: [
				    { src: 'plugin/math/math.js', async: true },
					{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
					{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() { hljs.initHighlightingOnLoad(); } },
					{ src: 'plugin/zoom-js/zoom.js', async: true },
					{ src: 'plugin/notes/notes.js', async: true }
					
				]
			});
		</script>
		
<script src="http://d3js.org/d3.v3.min.js"></script>
		<script type="text/javascript">
			//------ code to show D3 Bar Chart on First Slide-------
			var data = [44, 28, 15, 16, 23, 5];
			var width = 600,
			    barHeight = 20;
			var x = d3.scale.linear()
			    .domain([0, d3.max(data)])
			    .range([0, width]);
			var chart = d3.select(".chart")
			    .attr("width", width)
			    .attr("height", barHeight * data.length);
			var bar = chart.selectAll("g")
			    .data(data)
			  .enter().append("g")
			    .attr("transform", function(d, i) { return "translate(0," + i * barHeight + ")"; });
			bar.append("rect")
			    .attr("width", x)
			    .attr("height", barHeight - 1);
			bar.append("text")
			    .attr("x", function(d) { return x(d) - 3; })
			    .attr("y", barHeight / 2)
			    .attr("dy", ".35em")
			    .text(function(d) { return d; });

			//third slide
			var dataset = [
                  [ 150,     50 ],
                  [ 150,   150 ],
                  [ 150,   250 ],
                  [ 150,   350 ],
                  [ 150,   450 ],
                  [ 150,   550 ],
                  [ 350,   50 ],
                  [ 350,    150 ],
                  [ 350,    250 ],
                  [ 350,   350 ],
                  [ 350,450],
                  [ 350,550]
              ];
            var height = 900
            
            
            var dots = d3.select("svg").attr("width", width).attr("height", height).attr("class", "tooltip");
            dots.selectAll("circle")
                .data(dataset)
                .enter()
                .append("circle")
                .attr("cx", function(d) {
                return d[0];
                })
                .attr("cy", function(d) {
                return d[1];
                 })
                .attr("r", 5)
                .on("mouseover", function(d) {
                tooltip.transition()
               .duration(200)
               .style("opacity", .9);
          tooltip.html("yes"+ "<br>"  + "no")  
                .style("left", (d3.event.pageX) + "px")     
                .style("top", (d3.event.pageY - 28) + "px");    
      })
      .on("mouseout", function(d) {
          tooltip.transition()
               .duration(500)
               .style("opacity", 0);
      });
            // do more d3 stuff
        
            
		</script>
</body>
</html>
